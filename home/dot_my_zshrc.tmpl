# -*- mode: sh -*-
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME=""

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git history-substring-search colemak iterm2)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

autoload -Uz select-word-style
select-word-style bash

# Created by `pipx` on 2022-10-13 10:06:29
export PATH="$PATH:/Users/ilia.kurenkov/.local/bin"

# rosetta terminal setup
if [ $(arch) = "i386" ]; then
    alias brew86="/usr/local/bin/brew"
    alias pyenv86="arch -x86_64 pyenv"
fi

export EDITOR='emacsclient --alternate-editor=""'
alias edit='emacsclient --alternate-editor="" --no-wait'

alias reload='source ~/.zshrc'
alias ht=htop
alias cm='chezmoi'
alias cma='chezmoi apply -v'
alias cmu='chezmoi update'
alias cmad='chezmoi add'
alias cmcd='chezmoi cd'

eval "$(starship init zsh)"
eval "$(zoxide init zsh)"


# Toggle (Iterm2) Profile
function tp(){
    oldprof="${ITERM_PROFILE}"
    if [ "${oldprof}" = "Dark" ]
       then
           newprof="Default"
        else
            newprof="Dark"
    fi
    iterm2_profile "${newprof}"
}

# These variables are needed for the declarative docs sync command.
export CONSUL_CONFIG=$DATADOG_ROOT/consul-config
export INT_CORE=$DATADOG_ROOT/integrations-core
export INT_EXTRAS=$DATADOG_ROOT/integrations-extras

# DD Staging
export DD_STAGING_SITE="datad0g.com"
export DD_SITE="${DD_STAGING_SITE}"
export DD_API_KEY="{{ onepasswordRead "op://Private/dd-staging-api-key/credential" }}"
export DD_APP_KEY="{{ onepasswordRead "op://Private/dd-staging-app-key/credential" }}"

# Reduces the number of Agent images that we download for e2e tests in integrations-core
export DDEV_E2E_AGENT_PY2="datadog/agent-dev:nightly-main-py2"
export DDEV_E2E_AGENT="datadog/agent-dev:nightly-main-py3"

eval "$(direnv hook zsh)"

## DD ssh key to sign commits
# Set SSH_AUTH_SOCK to the launchd-managed ssh-agent socket (com.openssh.ssh-agent).
export SSH_AUTH_SOCK=$(launchctl asuser $(id -u) launchctl getenv SSH_AUTH_SOCK)

# Load SSH keys from the keychain if keychain is empty.
ssh-add -l > /dev/null || ssh-add --apple-load-keychain 2> /dev/null

export GITHUB_USER=iliakur
export GITHUB_TOKEN="{{ onepasswordRead "op://Private/personal-github-token/credential" }}"

alias k='kubectl'
alias gm="git machete"
alias gma='git machete add -y'
alias gmt='git machete traverse -y'

icchangelog () {
    # Add changelogs to integrations-core quickly.
    current_branch="$(git branch --show-current)"
    git pull origin "${current_branch}"
    ddev release changelog new
    # Just to be safe, only add fragment files automatically.
    git add -v **/changelog.d/*
    echo "Take a moment to review the staged files!"
    printf "%s " "Press enter to continue"
    read ans
    git commit -m "add changelog"
    git push origin "${current_branch}"
}

icpr () {
    # This way of computing base branch has pros and cons:
    # pro: no network connection needed
    # con: won't work if the default branch changes after I clone!

    # Some Alternatives Below

    # Define some aliases to set and store the default branch locally
    # [alias]
	  # default-branch = config branch.default
	  # set-default-branch = ! git config branch.default "$(git get-default-branch)"
	  # get-default-branch = ! git remote show origin | grep 'HEAD branch:' | awk '{printf(\"%s\", $3)}'

    # Use 'gh' to (most likely) query it every time
    # $(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)"
    # As Tim Visher says: Note that that's probably a network requestâ€¦ But, seriously, in the Year of our Glob 2024 who actually cares that git was originally meant to make most operations possible on an airplane back when airplane's didn't have wifi?
	  # default = ! git switch "$(git default-branch)"
    base="${1:-$(basename $(git rev-parse --abbrev-ref origin/HEAD))}"
    gh pr create --base "${base}"
    # Only create changelog if we need it.
    python "${DATADOG_ROOT}/integrations-core/ddev/src/ddev/utils/scripts/check_pr.py" changelog || icchangelog
}

icnochangelog_pr () {
    base="${1:-$(basename $(git rev-parse --abbrev-ref origin/HEAD))}"
    gh pr create --label 'changelog/no-changelog' --base "${base}"
}

nbranch_dd () {
    vared -p 'Jira card link? ' -c jira_card
    vared -p 'Slug for branch: ' -c slug_input
    slug="${slug_input// /-}"
    new_branch="ik/${jira_card:+$(basename ${jira_card})/}${slug}"
    base="$(basename $(git rev-parse --abbrev-ref origin/HEAD))"
    # Important to chain the commands so that we don't create/checkout the branch unless the pull succeeds.
    git checkout "${base}" \
        && git pull origin "${base}"\
        && git checkout -B "${new_branch}" "${base}"
}

# Allows passing aliases to 'sudo'
# https://askubuntu.com/a/22043
alias sudo='sudo '
alias prv='gh pr view -w'
alias prs='gh pr create' # Stands for "PR submit"
alias prc='gh pr checkout'

# Reno can't parse multiple shell "words", so for this command we set EDITOR to plain client.
# Most of the time the emacs daemon is running by then anyway.
alias agentchangelog='EDITOR=emacsclient reno new --edit'

# Prevent brew from updating packages when all I want is to install one.
export HOMEBREW_NO_AUTO_UPDATE=1

# Point ddev to agent nightly builds. This is a good balance of running recent agent code without pulling every single time.
export DDEV_E2E_AGENT_PY2="datadog/agent-dev:nightly-main-py2"
export DDEV_E2E_AGENT="datadog/agent-dev:nightly-main-py3"

# Adjusting display rotation based on how I have my screen.
alias vert='displayplacer "id:62124958-5E0A-4958-B471-CBEAED2E0F75 res:1080x1920 hz:75 color_depth:8 enabled:true scaling:off origin:(0,0) degree:90" "id:37D8832A-2D66-02CA-B9F7-8F30A301B230 res:1352x878 hz:120 color_depth:8 enabled:true scaling:on origin:(-1352,511) degree:0"'
alias hor='displayplacer "id:62124958-5E0A-4958-B471-CBEAED2E0F75 res:1920x1080 hz:75 color_depth:8 enabled:true scaling:off origin:(0,0) degree:0" "id:37D8832A-2D66-02CA-B9F7-8F30A301B230 res:1352x878 hz:120 color_depth:8 enabled:true scaling:on origin:(-1352,511) degree:0"'

# Shamelessly stolen from:
# https://github.com/wincent/wincent/blob/358260dc4d1dfda40e7baaadc2fac85ce278cb07/aspects/dotfiles/files/.zsh/exports#L56-L62
# filename (if known), line number if known, falling back to percent if known,
# falling back to byte offset, falling back to dash
export LESSPROMPT='?f%f .?ltLine %lt:?pt%pt\%:?btByte %bt:-...'

# i = case-insensitive searches, unless uppercase characters in search string
# F = exit immediately if output fits on one screen
# M = verbose prompt
# R = ANSI color support
# X = suppress alternate screen
# -#.25 = scroll horizontally by quarter of screen width (default is half)
export LESS="-iFMRX -#.25"

# Color man pages.
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;38;5;208m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[04;38;5;111m'
